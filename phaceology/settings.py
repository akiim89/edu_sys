"""
Django settings for phaceology project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os, sys
from urllib.parse import urlsplit

# Sanity check to make sure we're using the version of Django we expect.
try:
    import django
except:
    raise AssertionError('Could not import Django. Make sure you are running in the virtualenv.')

DJANGO_VERSION_NEEDED = (1, 10, 5, 'final', 0)
if django.VERSION != DJANGO_VERSION_NEEDED:
    raise AssertionError('Designed to run against Django version %s, as contained in the virtualenv. Got %s'
                         % (DJANGO_VERSION_NEEDED, django.VERSION))


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

################################################################################
# One of the biggest challenges with Django deployment is how to set up
# per-instance settings. It's especially important to keep security-critical
# things like passwords out of the main source code repository.
#
# We have adopted the practice of getting local settings from environment
# variables. This fits in nicely with many cloud services' ability to set
# configuration parameters as environment variables. And it is consistent with
# the "12-Factor App" guide, which is hip and trendy these days.
#
# Occasionally you will want to have multiple deployment environments and switch
# between them. To make this easier, you can create a file called
# phaceology_local_settings.py and set the single environment variable
# PHACEOLOGY_SERVER_CONFIG_DIR to point to the directory where that file is
# located. Within that file (at import time), put the settings you care about
# into `os.environ`.
#
# For live deployments, there are some versions of phaceology_local_settings.py
# in the server-config GitHub repository. Access to that repo should only be
# granted to trusted developers who will be deploying live code and need access
# to those passwords and so on.
#
# In general, we have tried to use a "convention over configuration" approach
# whenever possible. That means:
#
# * Log files go in the `logs` subdirectory of the source repository.
# * Static files are collected to the `collected-static` subdir.
# * Media files go to the `media` subdir.
################################################################################

# Load this server's settings into the environment.
_server_config_dir = os.environ.get('PHACEOLOGY_SERVER_CONFIG_DIR', os.path.join(BASE_DIR, 'local_settings', 'development'))
sys.path.append(_server_config_dir)
from phaceology_local_settings import PhaceologyLocalSettings

################################################################################
# Testing mode?
if len(sys.argv) >= 2 and sys.argv[1] == 'test':
    AUTOMATED_TESTING = True
else:
    AUTOMATED_TESTING = False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'h4w2m+u)6djo1@t(%x9z1$mowznp_izrpmq^$&s@5x_is_4@48'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 'PHACEOLOGY_DJANGO_DEBUG' in os.environ

ALLOWED_HOSTS = ['phaceology.looplingo.com', 'localhost']


################################################################################
# Server paths
USE_X_FORWARDED_HOST = True

# URL_BASE is the root of this server. CLIENT_URL_BASE is the root of the client
# portal, which might be the same.
if AUTOMATED_TESTING:
    URL_BASE = 'http://www.phaceology.com'
    CLIENT_URL_BASE = u'https://lingopoints.com'
else:    
    URL_BASE = os.environ['PHACEOLOGY_URL_BASE']
    CLIENT_URL_BASE = os.environ.get('PHACEOLOGY_CLIENT_URL_BASE', u'http://localhost:8080')

url_parts = urlsplit(URL_BASE)
URL_PROTOCOL = url_parts.scheme
URL_SERVER = url_parts.hostname
URL_PORT = ':%s' % url_parts.port if url_parts.port else ''
URL_PATH = url_parts.path

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

SITE_NAME = 'Phaceology'

################################################################################
# Application definition

INSTALLED_APPS = [
    # Phaceology Learning Platform. This project:
    'lp',
    
    # Django REST Framework. http://www.django-rest-framework.org/
    'rest_framework',
    # Django REST Framework authentication: http://www.django-rest-framework.org/api-guide/authentication/
    'rest_framework.authtoken',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admindocs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'phaceology.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'fb.FacebookAccessTokenBackend',
#    'fb.FacebookSignedRequestBackend',
    'lp.permissions.ObjectPermissionAuthBackend',
]

WSGI_APPLICATION = 'phaceology.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

if os.environ.get('PHACEOLOGY_DB_POSTGRES'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'phaceology',
            'USER': 'phaceology',
            'PASSWORD': os.environ['PHACEOLOGY_DB_PASSWORD'],
            'HOST': 'localhost',
            'PORT': '',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


AUTH_USER_MODEL = 'lp.User'

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Absolute filesystem path to the directory that will hold user-uploaded files.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_URL = os.environ.get('PHACEOLOGY_STATIC_URL', URL_BASE.rstrip('/') + '/static/')
CSS_URL = STATIC_URL + 'css/'
JAVASCRIPT_URL = STATIC_URL + 'js/'
STATIC_ROOT = os.path.join(BASE_DIR, 'collected-static')
FRONTEND_URL = STATIC_URL + 'webpack/'
# Additional locations of static files
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'frontend/dist'),
)

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions.
    'DEFAULT_PERMISSION_CLASSES': [
        'lp.permissions.ObjectPermisssionRestBackend',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'lp.filters.ParselikeFilterBackend',
        'rest_framework.filters.OrderingFilter',
    ),
    'ORDERING_PARAM':'order',
}

################################################################################
# Logging

# Convention over configuration: Put logs under the source code directory in the
# subdif "logs". Be sure to add that to `.gitignore`.
LOGDIR = os.path.join(BASE_DIR, "logs")
LOGFILE = os.path.join(LOGDIR, "phaceology.log")

if AUTOMATED_TESTING:
    CONSOLE_LOG_LEVEL = 'DEBUG'
    DB_HANDLERS = ['console']
    DB_LEVEL = 'ERROR'
elif 'shell' in sys.argv or 'runserver' in sys.argv:
    CONSOLE_LOG_LEVEL = 'DEBUG'
    DB_HANDLERS = ['console']
    DB_LEVEL = 'ERROR'
else:
    CONSOLE_LOG_LEVEL = 'CRITICAL'
    DB_HANDLERS = ['mail_admins']
    DB_LEVEL = 'ERROR'

LOGGING = {
    'version':1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters':{
        'simple':{
            'format':'%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
            }
        },
    'handlers':{
        'file':{
            'class':'logging.handlers.WatchedFileHandler',
            'formatter':'simple',
            'level':'DEBUG',
            'filename':LOGFILE,
            },
        'console':{
            'level': CONSOLE_LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'data':{
            'class':'logging.handlers.WatchedFileHandler',
            'formatter':'simple',
            'level':'INFO',
            'filename':os.path.join(LOGDIR, 'data.log')
            },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'

            # If there is an error in the mail configuration, trying to mail
            # admins leads to hard-to-find server errors. In that case, change
            # the above line to the following:

#            'class': 'logging.handlers.WatchedFileHandler',
#            'formatter':'simple',
#            'filename':os.path.join(LOGDIR, 'admin.log'),
            },
        },
    'loggers':{
        'root':{
            'handlers':['file', 'console'],
            'level':'DEBUG' if DEBUG else 'WARN',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db': {
            'handlers': DB_HANDLERS,
            'level': DB_LEVEL,
            'propagate': True,
        },
    },
    'root':{
        'handlers':['file', 'console'],
        'level':'DEBUG',
    },
}


ADMINS = (
    ("Eddie Sullivan", "eddie@looplingo.com"),
)
MANAGERS = ADMINS

################################################################################
# Facebook
FACEBOOK_APP_ID = os.environ.get('PHACEOLOGY_FACEBOOK_APP_ID')
FACEBOOK_APP_SECRET = os.environ.get('PHACEOLOGY_FACEBOOK_APP_SECRET')

