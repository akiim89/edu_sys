#!python# -*- coding: utf-8 -*-from __future__ import unicode_literalsimport os, inspect, sysSETTINGS_MODULE = 'phaceology.settings'PREFIX = 'PHACEOLOGY_'class PhaceologySettings(object):    # You can put default settings here, to be overridden by derived classes.    deployment = 'stage'    @classmethod    def print_bash_commands(cls):        '''        Call this to output the environment variables in a format appropriate for        sourcing in bash.        '''        print('export DJANGO_SETTINGS_MODULE=%s' % SETTINGS_MODULE)        for k,v in inspect.getmembers(cls):            if not callable(v) and v is not None and  not k.startswith('_'):                print("export %s%s='%s'" % (PREFIX, k.upper(), v))        @classmethod    def print_apache_commands(cls):        '''        Call this to output the environment variables in a format appropriate for        piping to an Apache configuration file.        '''        print('SetEnv DJANGO_SETTINGS_MODULE "%s"' % SETTINGS_MODULE)        for k,v in inspect.getmembers(cls):            if not callable(v) and v is not None and not k.startswith('_'):                print('SetEnv %s%s "%s"' % (PREFIX, k.upper(), v))    @classmethod    def update_environment(cls):        os.environ['DJANGO_SETTINGS_MODULE'] = SETTINGS_MODULE        for k,v in inspect.getmembers(cls):            if not callable(v) and v is not None and not k.startswith('_'):                os.environ.setdefault('%s%s' % (PREFIX, k.upper()), v)if __name__ == "__main__":    sys.path.append(os.environ['PHACEOLOGY_SERVER_CONFIG_DIR'])    main()def main():    from phaceology_local_settings import PhaceologyLocalSettings    if sys.argv[-1] == 'apache':        PhaceologyLocalSettings.print_apache_commands()    else:        PhaceologyLocalSettings.print_bash_commands()    def update_environment():    from phaceology_local_settings import PhaceologyLocalSettings    PhaceologyLocalSettings.update_environment()